{"version":3,"file":"index.js","sources":["../src/namespaced-event-delegation.ts","../src/event-manager.ts"],"sourcesContent":["import EventManager from './event-manager';\n\ninterface EventLabels {\n  events: string;\n  elements: string;\n}\n\ninterface DelegatedEvent extends EventLabels {\n  handler: Function;\n  targets?: string;\n  once?: boolean;\n}\n\nexport default class NamespacedEventDelegation extends EventManager {\n  public on = ({ events, elements, targets, handler, once = false }: DelegatedEvent) => {\n    this.candidates(elements, events, (element, eventNamespace) => {\n      element.addEventListener(\n        this.extractEventName(eventNamespace),\n        this.addEvent(element, eventNamespace, (originalEvent) => {\n          let handlerParams = {\n            event: eventNamespace,\n            delegatedTarget: element,\n            currentTarget: element,\n            originalEvent\n          };\n\n          if (targets) {\n            const target = originalEvent.target.closest(targets);\n            if (!target) {\n              return false;\n            }\n\n            handlerParams = {\n              ...handlerParams,\n              currentTarget: target || handlerParams.delegatedTarget\n            };\n          }\n          return handler(handlerParams);\n        }),\n        { once }\n      );\n    });\n  };\n\n  public once = ({ events, elements, targets, handler }: DelegatedEvent) =>\n    this.on({ events, elements, targets, handler, once: true });\n\n  public off = ({ elements, events }: EventLabels): boolean[] => {\n    const removed = [];\n    this.getEvents().forEach((storedEvent) => {\n      this.candidates(elements, events, (element, event) => {\n        element.removeEventListener(this.extractEventName(event), storedEvent.handler);\n        removed.push(this.removeEvents(element, event));\n      });\n    });\n\n    return removed;\n  };\n\n  public fire = ({ elements, events }: EventLabels): boolean[] => {\n    const fired = [];\n    const evt = document.createEvent('Event');\n\n    this.candidates(elements, events, (element, event) => {\n      evt.initEvent(this.extractEventName(event), true, true);\n      fired.push(element.dispatchEvent(evt));\n    });\n\n    return fired;\n  };\n\n  private candidates = (elements, events, fn) => {\n    const elementsArr = typeof elements === 'string' ? document.querySelectorAll(elements) : [elements];\n    const eventsArr = events.split(' ');\n    elementsArr.forEach((element) => eventsArr.forEach((event) => fn(element, event)));\n  };\n\n  private extractEventName = (eventName) => eventName.split('.')[0];\n}\n","interface EventsItem {\n  element;\n  eventName: string;\n  handler;\n}\n\ninterface EventsItems extends Array<EventsItem> {}\n\nexport default class EventManagerSingleton {\n  private eventsMap: EventsItems = [];\n\n  static instance: EventManagerSingleton;\n\n  constructor() {\n    if (EventManagerSingleton.instance) {\n      return EventManagerSingleton.instance;\n    }\n\n    EventManagerSingleton.instance = this;\n    return this;\n  }\n\n  addEvent = (element, eventName, handler) => {\n    this.eventsMap.push({ element, eventName, handler });\n    return handler;\n  };\n\n  removeEvents = (element, eventName): boolean => {\n    const eventsRemoved = 0;\n    this.eventsMap = this.eventsMap.filter(\n      (event, index) =>\n        event.element === element && event.eventName === eventName && delete this.eventsMap[index] && eventsRemoved + 1\n    );\n    return !!eventsRemoved;\n  };\n\n  getEvents = (eventName = undefined): EventsItems =>\n    eventName ? this.eventsMap.filter((event) => event.eventName === eventName) : this.eventsMap;\n\n  clearEvents = () => {\n    this.eventsMap = [];\n  };\n}\n"],"names":["targets","handler","once","_this","candidates","elements","events","element","eventNamespace","addEventListener","extractEventName","addEvent","originalEvent","handlerParams","event","delegatedTarget","currentTarget","target","closest","on","removed","getEvents","forEach","storedEvent","removeEventListener","push","removeEvents","fired","evt","document","createEvent","initEvent","dispatchEvent","fn","elementsArr","querySelectorAll","eventsArr","split","eventName","this","eventsMap","filter","index","eventsRemoved","undefined","EventManagerSingleton","instance"],"mappings":"kPAaA,8DACc,gBAAqBA,IAAAA,QAASC,IAAAA,YAASC,KAAAA,gBACjDC,EAAKC,aADgBC,WAARC,OACqB,SAACC,EAASC,GAC1CD,EAAQE,iBACNN,EAAKO,iBAAiBF,GACtBL,EAAKQ,SAASJ,EAASC,EAAgB,SAACI,GACtC,IAAIC,EAAgB,CAClBC,MAAON,EACPO,gBAAiBR,EACjBS,cAAeT,EACfK,cAAAA,GAGF,GAAIZ,EAAS,CACX,IAAMiB,EAASL,EAAcK,OAAOC,QAAQlB,GAC5C,IAAKiB,EACH,SAGFJ,OACKA,GACHG,cAAeC,GAAUJ,EAAcE,kBAG3C,OAAOd,EAAQY,KAEjB,CAAEX,KAAAA,OAKDC,OAAO,qBACPgB,GAAG,CAAEb,SADKA,OACGD,WADKA,SACKL,UADKA,QACIC,UADKA,QACIC,MAAM,KAE/CC,MAAM,gBAAGE,IAAAA,SAAUC,IAAAA,OAClBc,EAAU,GAQhB,OAPAjB,EAAKkB,YAAYC,QAAQ,SAACC,GACxBpB,EAAKC,WAAWC,EAAUC,EAAQ,SAACC,EAASO,GAC1CP,EAAQiB,oBAAoBrB,EAAKO,iBAAiBI,GAAQS,EAAYtB,SACtEmB,EAAQK,KAAKtB,EAAKuB,aAAanB,EAASO,QAIrCM,GAGFjB,OAAO,gBAAGE,IAAAA,SAAUC,IAAAA,OACnBqB,EAAQ,GACRC,EAAMC,SAASC,YAAY,SAOjC,OALA3B,EAAKC,WAAWC,EAAUC,EAAQ,SAACC,EAASO,GAC1Cc,EAAIG,UAAU5B,EAAKO,iBAAiBI,IAAQ,GAAM,GAClDa,EAAMF,KAAKlB,EAAQyB,cAAcJ,MAG5BD,GAGDxB,aAAa,SAACE,EAAUC,EAAQ2B,GACtC,IAAMC,EAAkC,iBAAb7B,EAAwBwB,SAASM,iBAAiB9B,GAAY,CAACA,GACpF+B,EAAY9B,EAAO+B,MAAM,KAC/BH,EAAYZ,QAAQ,SAACf,UAAY6B,EAAUd,QAAQ,SAACR,UAAUmB,EAAG1B,EAASO,QAGpEX,mBAAmB,SAACmC,UAAcA,EAAUD,MAAM,KAAK,uGChE/D,wBACE,OALME,eAAyB,GAajCA,cAAW,SAAChC,EAAS+B,EAAWrC,GAE9B,OADAE,EAAKqC,UAAUf,KAAK,CAAElB,QAAAA,EAAS+B,UAAAA,EAAWrC,QAAAA,IACnCA,GAGTsC,kBAAe,SAAChC,EAAS+B,GAMvB,OAJAnC,EAAKqC,UAAYrC,EAAKqC,UAAUC,OAC9B,SAAC3B,EAAO4B,UACN5B,EAAMP,UAAYA,GAAWO,EAAMwB,YAAcA,UAAoBnC,EAAKqC,UAAUE,IAAUC,KAE3F,GAGTJ,eAAY,SAACD,mBAAAA,IAAAA,OAAYM,GACvBN,EAAYnC,EAAKqC,UAAUC,OAAO,SAAC3B,UAAUA,EAAMwB,YAAcA,IAAanC,EAAKqC,WAErFD,iBAAc,WACZpC,EAAKqC,UAAY,IA1BbK,EAAsBC,SACjBD,EAAsBC,UAG/BD,EAAsBC,SAAWP"}