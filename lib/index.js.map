{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAmFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvEA,IAAM,EAAwB,SAC5B,EACA,QADA,IAAA,IAAA,EAAA,SACA,IAAA,IAAA,EAAA,KAEA,OAAU,EAAe,aAAe,GAExC,YAAY,UAAa,EAAY,MAAQ,SAC3C,EACA,EACA,EACA,GAEO,IAAA,EAAa,EAAe,MAAM,KAAI,GACvC,EAAY,OAAU,EAAe,aAEvC,GAA0B,mBAAnB,QAA6C,IAAZ,EAAuB,CAC3D,IAAA,EAAuB,EAE7B,EAAU,GAAkB,SAAU,GACpC,EAAW,KAAK,KAAM,CACpB,eAAc,EACd,OAAQ,KACR,gBAAiB,KACjB,cAAe,UAInB,EAAU,GAAkB,SAAU,GAE5B,IAAA,IAAA,EAAW,EAAK,OACtB,GAAU,IAAW,KACrB,EAAS,EAAO,WAEZ,QAAmB,IAAnB,EAAO,SAAyB,EAAO,QAAQ,GAAiB,CAClE,EAAQ,KAAK,KAAM,CACjB,OAAM,EACN,eAAc,EACd,gBAAiB,KACjB,cAAe,IAEjB,QAOD,OADF,KAAA,iBAAiB,EAAW,EAAU,GAAiB,GACrD,MAGT,YAAY,UAAa,EAAY,OAAS,SAC5C,GAEO,IAAA,EAAa,EAAe,MAAM,KAAI,GACvC,EAAgB,OAAU,EAAe,aAGxC,OAFF,KAAA,oBAAoB,EAAW,EAAc,WAC3C,EAAc,GACd,MAGT,YAAY,UAAa,EAAY,QAAU,SAE7C,EACA,EACA,GAGO,OADF,KAAA,GAAG,EAAgB,EAAgB,EAAS,CAAE,MAAM,IAClD,OAIX,QAAA,QAAe","file":"index.js","sourceRoot":"../src","sourcesContent":["declare global {\n  interface Element {\n    msMatchesSelector(selectors: string): boolean;\n  }\n  interface HTMLElement {\n    [key: string]: Function;\n  }\n  interface Window {\n    [index: string]: any;\n  }\n}\n\nconst enableEventDelegation = (\n  eventsPrefix = '',\n  eventsMapPrefix = '_'\n): void => {\n  window[`${eventsMapPrefix}eventsMap`] = [];\n\n  HTMLElement.prototype[`${eventsPrefix}on`] = function (\n    eventNamespace: string,\n    targetSelector: string,\n    handler: Function,\n    once: { boolean }\n  ): HTMLElement {\n    const [eventName] = eventNamespace.split('.');\n    const eventsMap = window[`${eventsMapPrefix}eventsMap`];\n\n    if (typeof targetSelector === 'function' && handler === undefined) {\n      const newHandler: Function = targetSelector;\n\n      eventsMap[eventNamespace] = function (event: any) {\n        newHandler.call(this, {\n          eventNamespace,\n          target: this,\n          delegatedTarget: this,\n          originalEvent: event\n        });\n      };\n    } else {\n      eventsMap[eventNamespace] = function (event: any) {\n        for (\n          let { target } = event;\n          target && target !== this;\n          target = target.parentNode\n        ) {\n          if (target.matches !== undefined && target.matches(targetSelector)) {\n            handler.call(this, {\n              target,\n              eventNamespace,\n              delegatedTarget: this,\n              originalEvent: event\n            });\n            break;\n          }\n        }\n      };\n    }\n\n    this.addEventListener(eventName, eventsMap[eventNamespace], once);\n    return this;\n  };\n\n  HTMLElement.prototype[`${eventsPrefix}off`] = function (\n    eventNamespace: string\n  ): HTMLElement {\n    const [eventName] = eventNamespace.split('.');\n    const targetedEvent = window[`${eventsMapPrefix}eventsMap`];\n    this.removeEventListener(eventName, targetedEvent[eventNamespace]);\n    delete targetedEvent[eventNamespace];\n    return this;\n  };\n\n  HTMLElement.prototype[`${eventsPrefix}once`] = function (\n    this: HTMLElement,\n    eventNamespace: string,\n    targetSelector: string,\n    handler: Function\n  ): HTMLElement {\n    this.on(eventNamespace, targetSelector, handler, { once: true });\n    return this;\n  };\n};\n\nexport default enableEventDelegation;\n"]}