{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["interface DelegatedEvent {\n  eventName: string;\n  delegatedTarget: Element;\n  handler?: Function;\n  target?: string;\n  once?: boolean;\n}\n\nclass EventDelegation {\n  private eventsMap = [];\n\n  extractEventName = (eventName) => eventName.split('.')[0];\n\n  on = ({ eventName, target = undefined, handler, delegatedTarget, once = false }: DelegatedEvent) => {\n    let newEvent;\n    let currentTarget = delegatedTarget;\n    const handlerParams = {\n      eventName,\n      currentTarget,\n      delegatedTarget\n    };\n\n    if (!target) {\n      newEvent = (event) => {\n        handler({ ...handlerParams, originalEvent: event });\n      };\n    } else {\n      newEvent = (event) => {\n        currentTarget = event.target;\n        for (\n          currentTarget;\n          currentTarget && currentTarget !== delegatedTarget;\n          currentTarget = currentTarget.parentNode as Element\n        ) {\n          if (currentTarget.matches !== undefined && currentTarget.matches(target)) {\n            handler({ ...handlerParams, currentTarget, originalEvent: event });\n            break;\n          }\n        }\n      };\n    }\n\n    this.eventsMap[eventName] = newEvent;\n\n    delegatedTarget.addEventListener(this.extractEventName(eventName), this.eventsMap[eventName], { once });\n\n    return currentTarget;\n  };\n\n  once = ({ eventName, target, handler, delegatedTarget }: DelegatedEvent) =>\n    this.on({\n      eventName,\n      target,\n      handler,\n      delegatedTarget,\n      once: true\n    });\n\n  off = ({ delegatedTarget, eventName }: DelegatedEvent): boolean => {\n    delegatedTarget.removeEventListener(this.extractEventName(eventName), this.eventsMap[eventName]);\n    return delete this.eventsMap[eventName];\n  };\n\n  fire = ({ delegatedTarget, eventName }: DelegatedEvent): boolean => {\n    const evt = document.createEvent('Event');\n    evt.initEvent(this.extractEventName(eventName), true, true);\n    return delegatedTarget.dispatchEvent(evt);\n  };\n}\n\nconst EventDelegationSingleton = new EventDelegation();\nObject.freeze(EventDelegationSingleton);\n\nexport default EventDelegationSingleton;\n"],"names":["EventDelegationSingleton","constructor","this","eventName","split","target","handler","delegatedTarget","once","newEvent","currentTarget","handlerParams","event","parentNode","undefined","matches","originalEvent","eventsMap","addEventListener","extractEventName","on","removeEventListener","evt","document","createEvent","initEvent","dispatchEvent","Object","freeze"],"mappings":"+MAsEA,MAAMA,EAA2B,IA9DjC,MAAAC,cACUC,eAAY,GAEpBA,sBAAoBC,GAAcA,EAAUC,MAAM,KAAK,GAEvDF,QAAK,EAAGC,UAAAA,EAAWE,OAAAA,EAAoBC,QAAAA,EAASC,gBAAAA,EAAiBC,KAAAA,GAAO,MACtE,IAAIC,EACAC,EAAgBH,EACpB,MAAMI,EAAgB,CACpBR,UAAAA,EACAO,cAAAA,EACAH,gBAAAA,GA2BF,OAnBEE,EALGJ,EAKSO,IAEV,IADAF,EAAgBE,EAAMP,OAGpBK,GAAiBA,IAAkBH,EACnCG,EAAgBA,EAAcG,WAE9B,QAA8BC,IAA1BJ,EAAcK,SAAyBL,EAAcK,QAAQV,GAAS,CACxEC,OAAaK,GAAeD,cAAAA,EAAeM,cAAeJ,KAC1D,QAbMA,IACVN,OAAaK,GAAeK,cAAeJ,MAkB/CV,KAAKe,UAAUd,GAAaM,EAE5BF,EAAgBW,iBAAiBhB,KAAKiB,iBAAiBhB,GAAYD,KAAKe,UAAUd,GAAY,CAAEK,KAAAA,IAEzFE,GAGTR,UAAO,EAAGC,UAAAA,EAAWE,OAAAA,EAAQC,QAAAA,EAASC,gBAAAA,KACpCL,KAAKkB,GAAG,CACNjB,UAAAA,EACAE,OAAAA,EACAC,QAAAA,EACAC,gBAAAA,EACAC,MAAM,IAGVN,SAAM,EAAGK,gBAAAA,EAAiBJ,UAAAA,MACxBI,EAAgBc,oBAAoBnB,KAAKiB,iBAAiBhB,GAAYD,KAAKe,UAAUd,gBAClEc,UAAUd,IAG/BD,UAAO,EAAGK,gBAAAA,EAAiBJ,UAAAA,MACzB,MAAMmB,EAAMC,SAASC,YAAY,SAEjC,OADAF,EAAIG,UAAUvB,KAAKiB,iBAAiBhB,IAAY,GAAM,GAC/CI,EAAgBmB,cAAcJ,MAKzCK,OAAOC,OAAO5B"}