{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["interface DelegatedEvent {\n  eventName: string;\n  delegatedTarget: Element;\n  handler?: Function;\n  target?: string;\n  once?: boolean;\n}\n\nclass EventDelegation {\n  private eventsMap = [];\n\n  extractEventName = (eventName) => eventName.split('.')[0];\n\n  on = ({ eventName, target = undefined, handler, delegatedTarget, once = false }: DelegatedEvent) => {\n    let newEvent;\n    let currentTarget = delegatedTarget;\n    const handlerParams = {\n      eventName,\n      currentTarget,\n      delegatedTarget\n    };\n\n    if (!target) {\n      newEvent = (event) => {\n        handler({ ...handlerParams, originalEvent: event });\n      };\n    } else {\n      newEvent = (event) => {\n        currentTarget = event.target;\n        for (\n          currentTarget;\n          currentTarget && currentTarget !== delegatedTarget;\n          currentTarget = currentTarget.parentNode as Element\n        ) {\n          if (currentTarget.matches !== undefined && currentTarget.matches(target)) {\n            handler({ ...handlerParams, currentTarget, originalEvent: event });\n            break;\n          }\n        }\n      };\n    }\n\n    this.eventsMap[eventName] = newEvent;\n\n    delegatedTarget.addEventListener(this.extractEventName(eventName), this.eventsMap[eventName], { once });\n\n    return currentTarget;\n  };\n\n  once = ({ eventName, target, handler, delegatedTarget }: DelegatedEvent) =>\n    this.on({\n      eventName,\n      target,\n      handler,\n      delegatedTarget,\n      once: true\n    });\n\n  off = ({ delegatedTarget, eventName }: DelegatedEvent): boolean => {\n    delegatedTarget.removeEventListener(this.extractEventName(eventName), this.eventsMap[eventName]);\n    return delete this.eventsMap[eventName];\n  };\n\n  fire = ({ delegatedTarget, eventName }: DelegatedEvent): boolean => {\n    const evt = document.createEvent('Event');\n    evt.initEvent(this.extractEventName(eventName), true, true);\n    return delegatedTarget.dispatchEvent(evt);\n  };\n}\n\nconst EventDelegationSingleton = new EventDelegation();\nObject.freeze(EventDelegationSingleton);\n\nexport default EventDelegationSingleton;\n"],"names":["EventDelegationSingleton","this","eventName","split","target","undefined","handler","delegatedTarget","once","currentTarget","handlerParams","_this","eventsMap","event","parentNode","matches","originalEvent","addEventListener","extractEventName","on","removeEventListener","evt","document","createEvent","initEvent","dispatchEvent","Object","freeze"],"mappings":"qZAsEMA,EAA2B,IA9DjC,sBACUC,eAAY,GAEpBA,sBAAmB,SAACC,UAAcA,EAAUC,MAAM,KAAK,IAEvDF,QAAK,gBAAGC,IAAAA,cAAWE,OAAAA,kBAASC,IAAWC,IAAAA,QAASC,IAAAA,oBAAiBC,KAAAA,gBAE3DC,EAAgBF,EACdG,EAAgB,CACpBR,UAAAA,EACAO,cAAAA,EACAF,gBAAAA,GA2BF,OAJAI,EAAKC,UAAUV,GApBVE,EAKQ,SAACS,GAEV,IADAJ,EAAgBI,EAAMT,OAGpBK,GAAiBA,IAAkBF,EACnCE,EAAgBA,EAAcK,WAE9B,QAA8BT,IAA1BI,EAAcM,SAAyBN,EAAcM,QAAQX,GAAS,CACxEE,OAAaI,GAAeD,cAAAA,EAAeO,cAAeH,KAC1D,QAbK,SAACA,GACVP,OAAaI,GAAeM,cAAeH,MAoB/CN,EAAgBU,iBAAiBN,EAAKO,iBAAiBhB,GAAYS,EAAKC,UAAUV,GAAY,CAAEM,KAAAA,IAEzFC,GAGTR,UAAO,mBACLU,EAAKQ,GAAG,CACNjB,YAFMA,UAGNE,SAHiBA,OAIjBE,UAJyBA,QAKzBC,kBALkCA,gBAMlCC,MAAM,KAGVP,SAAM,gBAAoBC,IAAAA,UAExB,SAFOK,gBACSa,oBAAoBT,EAAKO,iBAAiBhB,GAAYS,EAAKC,UAAUV,WACvES,EAAKC,UAAUV,IAG/BD,UAAO,gBAAGM,IAAAA,gBAAiBL,IAAAA,UACnBmB,EAAMC,SAASC,YAAY,SAEjC,OADAF,EAAIG,UAAUb,EAAKO,iBAAiBhB,IAAY,GAAM,GAC/CK,EAAgBkB,cAAcJ,YAKzCK,OAAOC,OAAO3B"}